'''base64 encoded image data for testing'''

import base64
import io

from PIL import Image

pixel1x1 = base64.b64decode('''
/9j/4AAQSkZJRgABAQEASABIAAD//gATQ3JlYXRlZCB3aXRoIEdJTVD/2wBDAIVcZHVkU4V1bHWW
joWeyP/ZyLe3yP////L/////////////////////////////////////////////////////2wBD
AY6WlsivyP/Z2f//////////////////////////////////////////////////////////////
////////////wgARCAABAAEDAREAAhEBAxEB/8QAFAABAAAAAAAAAAAAAAAAAAAAA//EABQBAQAA
AAAAAAAAAAAAAAAAAAD/2gAMAwEAAhADEAAAAUP/xAAUEAEAAAAAAAAAAAAAAAAAAAAA/9oACAEB
AAEFAn//xAAUEQEAAAAAAAAAAAAAAAAAAAAA/9oACAEDAQE/AX//xAAUEQEAAAAAAAAAAAAAAAAA
AAAA/9oACAECAQE/AX//xAAUEAEAAAAAAAAAAAAAAAAAAAAA/9oACAEBAAY/An//xAAUEAEAAAAA
AAAAAAAAAAAAAAAA/9oACAEBAAE/IX//2gAMAwEAAgADAAAAEB//xAAUEQEAAAAAAAAAAAAAAAAA
AAAA/9oACAEDAQE/EH//xAAUEQEAAAAAAAAAAAAAAAAAAAAA/9oACAECAQE/EH//xAAUEAEAAAAA
AAAAAAAAAAAAAAAA/9oACAEBAAE/EH//2Q==''')

with io.BytesIO(pixel1x1) as f:
    pixel1x1_img = Image.open(f)
    pixel1x1_img.load()

png1x1 = base64.b64decode('''
iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAABmJLR0QA/wD/AP+gvaeTAAAACXBI
WXMAAAsTAAALEwEAmpwYAAAAB3RJTUUH4wISEAcwqWoK4wAAAAh0RVh0Q29tbWVudAD2zJa/AAAA
DUlEQVQI12NgYGBgAAAABQABXvMqOgAAAABJRU5ErkJggg==''')

with io.BytesIO(png1x1) as f:
    png1x1_img = Image.open(f)
    png1x1_img.load()

white100x100 = base64.b64decode('''
/9j/4AAQSkZJRgABAQEASABIAAD//gATQ3JlYXRlZCB3aXRoIEdJTVD/2wBDAKBueIx4ZKCMgoy0
qqC+8P//8Nzc8P//////////////////////////////////////////////////////////2wBD
Aaq0tPDS8P//////////////////////////////////////////////////////////////////
////////////wgARCABkAGQDAREAAhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAL/xAAUAQEA
AAAAAAAAAAAAAAAAAAAA/9oADAMBAAIQAxAAAAGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/8QAFBABAAAAAAAAAAAAAAAAAAAA
cP/aAAgBAQABBQIp/8QAFBEBAAAAAAAAAAAAAAAAAAAAcP/aAAgBAwEBPwEp/8QAFBEBAAAAAAAA
AAAAAAAAAAAAcP/aAAgBAgEBPwEp/8QAFBABAAAAAAAAAAAAAAAAAAAAcP/aAAgBAQAGPwIp/8QA
FBABAAAAAAAAAAAAAAAAAAAAcP/aAAgBAQABPyEp/9oADAMBAAIAAwAAABAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/8QAFBEB
AAAAAAAAAAAAAAAAAAAAcP/aAAgBAwEBPxAp/8QAFBEBAAAAAAAAAAAAAAAAAAAAcP/aAAgBAgEB
PxAp/8QAFBABAAAAAAAAAAAAAAAAAAAAcP/aAAgBAQABPxAp/9k=''')

with io.BytesIO(white100x100) as f:
    white100x100_img = Image.open(f)
    white100x100_img.load()

white117x100 = base64.b64decode('''
/9j/4AAQSkZJRgABAQEASABIAAD//gATQ3JlYXRlZCB3aXRoIEdJTVD/2wBDAKBueIx4ZKCMgoy0
qqC+8P//8Nzc8P//////////////////////////////////////////////////////////2wBD
Aaq0tPDS8P//////////////////////////////////////////////////////////////////
////////////wgARCABkAHUDAREAAhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAL/xAAUAQEA
AAAAAAAAAAAAAAAAAAAA/9oADAMBAAIQAxAAAAGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD//EABQQAQAAAAAA
AAAAAAAAAAAAAHD/2gAIAQEAAQUCQ//EABQRAQAAAAAAAAAAAAAAAAAAAHD/2gAIAQMBAT8BQ//E
ABQRAQAAAAAAAAAAAAAAAAAAAHD/2gAIAQIBAT8BQ//EABQQAQAAAAAAAAAAAAAAAAAAAHD/2gAI
AQEABj8CQ//EABQQAQAAAAAAAAAAAAAAAAAAAHD/2gAIAQEAAT8hQ//aAAwDAQACAAMAAAAQAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAH//xAAUEQEAAAAAAAAAAAAAAAAAAABw/9oACAEDAQE/EEP/xAAUEQEAAAAA
AAAAAAAAAAAAAABw/9oACAECAQE/EEP/xAAUEAEAAAAAAAAAAAAAAAAAAABw/9oACAEBAAE/EEP/
2Q==''')

with io.BytesIO(white117x100) as f:
    white117x100_img = Image.open(f)
    white117x100_img.load()

white100x123 = base64.b64decode('''
/9j/4AAQSkZJRgABAQEASABIAAD//gATQ3JlYXRlZCB3aXRoIEdJTVD/2wBDAKBueIx4ZKCMgoy0
qqC+8P//8Nzc8P//////////////////////////////////////////////////////////2wBD
Aaq0tPDS8P//////////////////////////////////////////////////////////////////
////////////wgARCAB7AGQDAREAAhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAL/xAAUAQEA
AAAAAAAAAAAAAAAAAAAA/9oADAMBAAIQAxAAAAGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAf/8QAFBAB
AAAAAAAAAAAAAAAAAAAAcP/aAAgBAQABBQJQ/8QAFBEBAAAAAAAAAAAAAAAAAAAAcP/aAAgBAwEB
PwFQ/8QAFBEBAAAAAAAAAAAAAAAAAAAAcP/aAAgBAgEBPwFQ/8QAFBABAAAAAAAAAAAAAAAAAAAA
cP/aAAgBAQAGPwJQ/8QAFBABAAAAAAAAAAAAAAAAAAAAcP/aAAgBAQABPyFQ/9oADAMBAAIAAwAA
ABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/xAAUEQEAAAAAAAAAAAAAAAAAAABw/9oACAEDAQE/EFD/
xAAUEQEAAAAAAAAAAAAAAAAAAABw/9oACAECAQE/EFD/xAAUEAEAAAAAAAAAAAAAAAAAAABw/9oA
CAEBAAE/EFD/2Q==''')

with io.BytesIO(white100x123) as f:
    white100x123_img = Image.open(f)
    white100x123_img.load()

white150x100 = base64.b64decode('''
/9j/4AAQSkZJRgABAQEASABIAAD//gATQ3JlYXRlZCB3aXRoIEdJTVD/2wBDAKBueIx4ZKCMgoy0
qqC+8P//8Nzc8P//////////////////////////////////////////////////////////2wBD
Aaq0tPDS8P//////////////////////////////////////////////////////////////////
////////////wgARCABkAJYDAREAAhEBAxEB/8QAFQABAQAAAAAAAAAAAAAAAAAAAAL/xAAUAQEA
AAAAAAAAAAAAAAAAAAAA/9oADAMBAAIQAxAAAAGwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAD/xAAUEAEAAAAAAAAAAAAAAAAAAABw/9oACAEBAAEFAnf/xAAUEQEAAAAAAAAAAAAA
AAAAAABw/9oACAEDAQE/AXf/xAAUEQEAAAAAAAAAAAAAAAAAAABw/9oACAECAQE/AXf/xAAUEAEA
AAAAAAAAAAAAAAAAAABw/9oACAEBAAY/Anf/xAAUEAEAAAAAAAAAAAAAAAAAAABw/9oACAEBAAE/
IXf/2gAMAwEAAgADAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB//EABQR
AQAAAAAAAAAAAAAAAAAAAHD/2gAIAQMBAT8Qd//EABQRAQAAAAAAAAAAAAAAAAAAAHD/2gAIAQIB
AT8Qd//EABQQAQAAAAAAAAAAAAAAAAAAAHD/2gAIAQEAAT8Qd//Z''')

with io.BytesIO(white150x100) as f:
    white150x100_img = Image.open(f)
    white150x100_img.load()


badexif = base64.b64decode('''
/9j/4AAQSkZJRgABAQEASABIAAD/4QYrRXhpZgAATU0AKgAAAAgACgEPAAIAAAALAAAAhgEQAAIA
AAANAAAAkgEaAAUAAAABAAAAoAEbAAUAAAABAAAAqAEoAAMAAAABAAIAAAExAAIAAAAMAAAAsAEy
AAIAAAAUAAAAvAITAAMAAAABAAEAAIdpAAQAAAABAAAA0IglAAQAAAABAAADBgAAA0hITUQgR2xv
YmFsAABOb2tpYSA3IHBsdXMAAAAAAEgAAAABAAAASAAAAAFHSU1QIDIuOC4xNgAyMDIwOjAxOjEy
IDE2OjQ4OjQwAAAdgpoABQAAAAEAAAIygp0ABQAAAAEAAAI6iCIAAwAAAAEAAAAAiCcAAwAAAAEA
ZAAAkAAABwAAAAQwMjIwkAMAAgAAABQAAAJCkAQAAgAAABQAAAJWkQEABwAAAAQBAgMAkgEACgAA
AAEAAAJqkgIABQAAAAEAAAJykgMACgAAAAEAAAJ6kgcAAwAAAAEAAgAAkgkAAwAAAAEAGAAAkgoA
BQAAAAEAAAKCknwABwAAAEYAAAKKkpAAAgAAAAcAAALQkpEAAgAAAAcAAALYkpIAAgAAAAcAAALg
oAAABwAAAAQwMTAwoAEAAwAAAAEAAQAAoAIABAAAAAEAAAAEoAMABAAAAAEAAAADoAUABAAAAAEA
AALoohcAAwAAAAEAAgAAowEABwAAAAEBAAAApAIAAwAAAAEAAAAApAMAAwAAAAEAAAAApAUAAwAA
AAEABQAApAYAAwAAAAEAAgAAAAAAAAAAAAEAAAEgAAAAyAAAAGQyMDE5OjA3OjA3IDE5OjExOjA0
ADIwMTk6MDc6MDcgMTk6MTE6MDQAAAAf5wAAA+gAAADIAAAAZAAAAhgAAABkAAAN8gAAA+j//40Y
AAArERscNQA1AAAejADoA3wB6gAAAAAACSAAAOgDcAeUARkB+wAAAAAA4wK4AAAAAACGAbAAyQAA
AHoG3ATMAhgCNTg3MTAzAAA1ODcxMDMAADU4NzEwMwAAAAIAAQACAAAABFI5OAAAAgAHAAAABDAx
MDAAAAAAAAIABwAFAAAAAwAAAyQAHQACAAAACwAAAzwAAAAAAAAAEQAAAAEAAAALAAAAAQAAAAQA
AAABMjAxOTowNzowNwAAAAYBAwADAAAAAQAGAAABGgAFAAAAAQAAA5YBGwAFAAAAAQAAA54BKAAD
AAAAAQACAAACAQAEAAAAAQAAA6YCAgAEAAAAAQAAAn0AAAAAAAAASAAAAAEAAABIAAAAAf/Y/+AA
EEpGSUYAAQEAAAEAAQAA/9sAQwAIBgYHBgUIBwcHCQkICgwUDQwLCwwZEhMPFB0aHx4dGhwcICQu
JyAiLCMcHCg3KSwwMTQ0NB8nOT04MjwuMzQy/9sAQwEJCQkMCwwYDQ0YMiEcITIyMjIyMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIy/8AAEQgAAgADAwEiAAIRAQMR
Af/EAB8AAAEFAQEBAQEBAAAAAAAAAAABAgMEBQYHCAkKC//EALUQAAIBAwMCBAMFBQQEAAABfQEC
AwAEEQUSITFBBhNRYQcicRQygZGhCCNCscEVUtHwJDNicoIJChYXGBkaJSYnKCkqNDU2Nzg5OkNE
RUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6g4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqy
s7S1tre4ubrCw8TFxsfIycrS09TV1tfY2drh4uPk5ebn6Onq8fLz9PX29/j5+v/EAB8BAAMBAQEB
AQEBAQEAAAAAAAABAgMEBQYHCAkKC//EALURAAIBAgQEAwQHBQQEAAECdwABAgMRBAUhMQYSQVEH
YXETIjKBCBRCkaGxwQkjM1LwFWJy0QoWJDThJfEXGBkaJicoKSo1Njc4OTpDREVGR0hJSlNUVVZX
WFlaY2RlZmdoaWpzdHV2d3h5eoKDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLD
xMXGx8jJytLT1NXW19jZ2uLj5OXm5+jp6vLz9PX29/j5+v/aAAwDAQACEQMRAD8AiEjkZLsT9aKK
K1JR/9n/4QtmaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wLwA8P3hwYWNrZXQgYmVnaW49J++7
vycgaWQ9J1c1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCc/Pgo8eDp4bXBtZXRhIHhtbG5zOng9J2Fk
b2JlOm5zOm1ldGEvJz4KPHJkZjpSREYgeG1sbnM6cmRmPSdodHRwOi8vd3d3LnczLm9yZy8xOTk5
LzAyLzIyLXJkZi1zeW50YXgtbnMjJz4KCiA8cmRmOkRlc2NyaXB0aW9uIHhtbG5zOmV4aWY9J2h0
dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvJz4KICA8ZXhpZjpNYWtlPkhNRCBHbG9iYWw8L2V4
aWY6TWFrZT4KICA8ZXhpZjpNb2RlbD5Ob2tpYSA3IHBsdXM8L2V4aWY6TW9kZWw+CiAgPGV4aWY6
WFJlc29sdXRpb24+NzI8L2V4aWY6WFJlc29sdXRpb24+CiAgPGV4aWY6WVJlc29sdXRpb24+NzI8
L2V4aWY6WVJlc29sdXRpb24+CiAgPGV4aWY6UmVzb2x1dGlvblVuaXQ+SW5jaDwvZXhpZjpSZXNv
bHV0aW9uVW5pdD4KICA8ZXhpZjpTb2Z0d2FyZT5Pbnl4XzAwV1ctdXNlciA5IFBQUjEuMTgwNjEw
LjAxMSAwMFdXXzNfNTRFIHJlbGVhc2Uta2V5c1YxMDAuMDA4Mi4wMVYwMTAuMDAxOS4wNDwvZXhp
ZjpTb2Z0d2FyZT4KICA8ZXhpZjpEYXRlVGltZT4yMDE5OjA3OjA3IDE5OjExOjA0PC9leGlmOkRh
dGVUaW1lPgogIDxleGlmOllDYkNyUG9zaXRpb25pbmc+Q2VudGVyZWQ8L2V4aWY6WUNiQ3JQb3Np
dGlvbmluZz4KICA8ZXhpZjpDb21wcmVzc2lvbj5KUEVHIGNvbXByZXNzaW9uPC9leGlmOkNvbXBy
ZXNzaW9uPgogIDxleGlmOlhSZXNvbHV0aW9uPjcyPC9leGlmOlhSZXNvbHV0aW9uPgogIDxleGlm
OllSZXNvbHV0aW9uPjcyPC9leGlmOllSZXNvbHV0aW9uPgogIDxleGlmOlJlc29sdXRpb25Vbml0
PkluY2g8L2V4aWY6UmVzb2x1dGlvblVuaXQ+CiAgPGV4aWY6RXhwb3N1cmVUaW1lPjEvMjg4IHNl
Yy48L2V4aWY6RXhwb3N1cmVUaW1lPgogIDxleGlmOkZOdW1iZXI+Zi8yLDA8L2V4aWY6Rk51bWJl
cj4KICA8ZXhpZjpFeHBvc3VyZVByb2dyYW0+Tm90IGRlZmluZWQ8L2V4aWY6RXhwb3N1cmVQcm9n
cmFtPgogIDxleGlmOklTT1NwZWVkUmF0aW5ncz4KICAgPHJkZjpTZXE+CiAgICA8cmRmOmxpPjEw
MDwvcmRmOmxpPgogICA8L3JkZjpTZXE+CiAgPC9leGlmOklTT1NwZWVkUmF0aW5ncz4KICA8ZXhp
ZjpFeGlmVmVyc2lvbj5FeGlmIFZlcnNpb24gMi4yPC9leGlmOkV4aWZWZXJzaW9uPgogIDxleGlm
OkRhdGVUaW1lT3JpZ2luYWw+MjAxOTowNzowNyAxOToxMTowNDwvZXhpZjpEYXRlVGltZU9yaWdp
bmFsPgogIDxleGlmOkRhdGVUaW1lRGlnaXRpemVkPjIwMTk6MDc6MDcgMTk6MTE6MDQ8L2V4aWY6
RGF0ZVRpbWVEaWdpdGl6ZWQ+CiAgPGV4aWY6Q29tcG9uZW50c0NvbmZpZ3VyYXRpb24+CiAgIDxy
ZGY6U2VxPgogICAgPHJkZjpsaT5ZIENiIENyIC08L3JkZjpsaT4KICAgPC9yZGY6U2VxPgogIDwv
ZXhpZjpDb21wb25lbnRzQ29uZmlndXJhdGlvbj4KICA8ZXhpZjpTaHV0dGVyU3BlZWRWYWx1ZT44
LDE3IEVWICgxLzI4NyBzZWMuKTwvZXhpZjpTaHV0dGVyU3BlZWRWYWx1ZT4KICA8ZXhpZjpBcGVy
dHVyZVZhbHVlPjIsMDAgRVYgKGYvMiwwKTwvZXhpZjpBcGVydHVyZVZhbHVlPgogIDxleGlmOkJy
aWdodG5lc3NWYWx1ZT41LDM2IEVWICgxNDAsNzIgY2QvbV4yKTwvZXhpZjpCcmlnaHRuZXNzVmFs
dWU+CiAgPGV4aWY6TWV0ZXJpbmdNb2RlPkNlbnRlci13ZWlnaHRlZCBhdmVyYWdlPC9leGlmOk1l
dGVyaW5nTW9kZT4KICA8ZXhpZjpGbGFzaCByZGY6cGFyc2VUeXBlPSdSZXNvdXJjZSc+CiAgPC9l
eGlmOkZsYXNoPgogIDxleGlmOkZvY2FsTGVuZ3RoPjMsNiBtbTwvZXhpZjpGb2NhbExlbmd0aD4K
ICA8ZXhpZjpNYWtlck5vdGU+NzAgYnl0ZXMgdW5kZWZpbmVkIGRhdGE8L2V4aWY6TWFrZXJOb3Rl
PgogIDxleGlmOlN1YnNlY1RpbWU+NTg3MTAzPC9leGlmOlN1YnNlY1RpbWU+CiAgPGV4aWY6U3Vi
U2VjVGltZU9yaWdpbmFsPjU4NzEwMzwvZXhpZjpTdWJTZWNUaW1lT3JpZ2luYWw+CiAgPGV4aWY6
U3ViU2VjVGltZURpZ2l0aXplZD41ODcxMDM8L2V4aWY6U3ViU2VjVGltZURpZ2l0aXplZD4KICA8
ZXhpZjpGbGFzaFBpeFZlcnNpb24+Rmxhc2hQaXggVmVyc2lvbiAxLjA8L2V4aWY6Rmxhc2hQaXhW
ZXJzaW9uPgogIDxleGlmOkNvbG9yU3BhY2U+c1JHQjwvZXhpZjpDb2xvclNwYWNlPgogIDxleGlm
OlBpeGVsWERpbWVuc2lvbj40NjA4PC9leGlmOlBpeGVsWERpbWVuc2lvbj4KICA8ZXhpZjpQaXhl
bFlEaW1lbnNpb24+MzQ1NjwvZXhpZjpQaXhlbFlEaW1lbnNpb24+CiAgPGV4aWY6U2Vuc2luZ01l
dGhvZD5PbmUtY2hpcCBjb2xvciBhcmVhIHNlbnNvcjwvZXhpZjpTZW5zaW5nTWV0aG9kPgogIDxl
eGlmOlNjZW5lVHlwZT5EaXJlY3RseSBwaG90b2dyYXBoZWQ8L2V4aWY6U2NlbmVUeXBlPgogIDxl
eGlmOkV4cG9zdXJlTW9kZT5BdXRvIGV4cG9zdXJlPC9leGlmOkV4cG9zdXJlTW9kZT4KICA8ZXhp
ZjpXaGl0ZUJhbGFuY2U+QXV0byB3aGl0ZSBiYWxhbmNlPC9leGlmOldoaXRlQmFsYW5jZT4KICA8
ZXhpZjpGb2NhbExlbmd0aEluMzVtbUZpbG0+NTwvZXhpZjpGb2NhbExlbmd0aEluMzVtbUZpbG0+
CiAgPGV4aWY6U2NlbmVDYXB0dXJlVHlwZT5Qb3J0cmFpdDwvZXhpZjpTY2VuZUNhcHR1cmVUeXBl
PgogIDxleGlmOkdQU1RpbWVTdGFtcD4xNzoxMTowNCwwMDwvZXhpZjpHUFNUaW1lU3RhbXA+CiAg
PGV4aWY6R1BTRGF0ZVN0YW1wPjIwMTk6MDc6MDc8L2V4aWY6R1BTRGF0ZVN0YW1wPgogIDxleGlm
OkludGVyb3BlcmFiaWxpdHlJbmRleD5SOTg8L2V4aWY6SW50ZXJvcGVyYWJpbGl0eUluZGV4Pgog
IDxleGlmOkludGVyb3BlcmFiaWxpdHlWZXJzaW9uPjAxMDA8L2V4aWY6SW50ZXJvcGVyYWJpbGl0
eVZlcnNpb24+CiA8L3JkZjpEZXNjcmlwdGlvbj4KCjwvcmRmOlJERj4KPC94OnhtcG1ldGE+Cjw/
eHBhY2tldCBlbmQ9J3InPz4K/9sAQwABAQEBAQEBAQEBAQEBAQECAQEBAQECAQEBAgICAgICAgIC
AwMEAwMDAwMCAgMEAwMEBAQEBAIDBQUEBAUEBAQE/9sAQwEBAQEBAQECAQECBAMCAwQEBAQEBAQE
BAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQE/8IAEQgAAwAEAwERAAIR
AQMRAf/EABQAAQAAAAAAAAAAAAAAAAAAAAL/xAAVAQEBAAAAAAAAAAAAAAAAAAAGB//aAAwDAQAC
EAMQAAABbad//8QAFhABAQEAAAAAAAAAAAAAAAAAAwAC/9oACAEBAAEFAh2q3//EAB8RAAECBgMA
AAAAAAAAAAAAAAECAwAFBhITITEyQ//aAAgBAwEBPwFirJ6LxlT2Pm0eNAbRH//EABwRAQABBAMA
AAAAAAAAAAAAAAECAAMFESJBYv/aAAgBAgEBPwEwuNlYtTYO028pnb6r/8QAHhAAAgEDBQAAAAAA
AAAAAAAAAQIDAAQSETEzYZH/2gAIAQEABj8CkaWe4kbJRk1y5bjQ769n2v/EABcQAQEBAQAAAAAA
AAAAAAAAAAEhABH/2gAIAQEAAT8hVInQtctVVFaqXf/aAAwDAQACAAMAAAAQ/wD/xAAXEQEBAQEA
AAAAAAAAAAAAAAABEQBB/9oACAEDAQE/EC6wCWQUFIAABDsq7//EABgRAQEAAwAAAAAAAAAAAAAA
AAERACHh/9oACAECAQE/EN+cwsW6gCvM/8QAFRABAQAAAAAAAAAAAAAAAAAAARH/2gAIAQEAAT8Q
glv7VRUkpWCqv//Z''')

with io.BytesIO(badexif) as f:
    badexif_img = Image.open(f)
    badexif_img.load()


colorcast = base64.b64decode('''
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
A//Z''')

with io.BytesIO(colorcast) as f:
    colorcast_img = Image.open(f)
    colorcast_img.load()
